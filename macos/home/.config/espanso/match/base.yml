matches:
  # prometheus

  - trigger: ";median;"
    replace: "quantile_over_time(0.5,{{out}}[3h$|$])"
    vars:
      - name: out
        type: clipboard

  - trigger: ";avg;"
    replace: "avg_over_time({{out}}[1d$|$])"
    vars:
      - name: out
        type: clipboard

  - trigger: ";am;"
    replace: "avg_over_time(quantile_over_time(0.5,{{out}}[3h])[1d$|$])"
    vars:
      - name: out
        type: clipboard

  # vim
  - trigger: ";edit;"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "sleep 0.1 && pbpaste > /tmp/espanso-nvim.txt && wezterm -e zsh -c 'source ~/.profile && source ~/.zshrc && nvim /tmp/espanso-nvim.txt' && sleep 0.2 && cat /tmp/espanso-nvim.txt"

  - trigger: ";setup;"
    replace: "apt update -qq && apt install -qq -y curl && curl -#fLo- 'https://gist.github.com/asdf8601/ef7af0db1a9a70c0c73337f5788b0072/raw/setup-container.sh' | sh"

  - trigger: ">h"
    replace: "> # @today "

  - trigger: ">hh"
    replace: "> ## @today "

  - trigger: ",h"
    replace: "# @today "

  - trigger: ",hh"
    replace: "## @today "

  - trigger: ";issue;"
    force_clipboard: true
    replace: |-
      ## Context
      while x then y

      ## Problem
      y is a problem because of z

      ## Solution
      we can try to do a,b,c

  - trigger: ";retro"
    force_clipboard: true
    replace: |-
      1. Max üî¥üü°üü¢
      üîÅ
        - item
      ‚úÖ
        - item
      üß©üß©

  - trigger: ";draft;"
    replace: |-
      ---
      title: "Title"
      date: {{date}}
      draft: false
      categories: ["programming"]
      labels: ["spanish"]
      ---
    vars:
      - name: date
        type: match
        params:
          trigger: ";date"

  - trigger: ";today;"
    replace: "/heading 3\n@Today \n"

  - trigger: ";plt;"
    replace: |-
      from matplotlib import pyplot as plt
      plt.show()

  - trigger: ";pass;"
    replace: "{{out}}"
    force_clipboard: true
    vars:
      - name: out
        type: shell
        params:
          cmd: "python -c 'from random import choices as c; import string as s; print(\"\".join(c(s.ascii_letters, k=10) + c(s.digits, k=6) + c(s.punctuation, k=2)))'"

  - trigger: ";ip"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "curl 'https://api.ipify.org'"

  - trigger: ";details"
    replace: |-
      <details><summary>Click to expand</summary>

      </details>

  - trigger: ";fold"
    replace: |-
      <details><summary>Click to expand</summary>

      </details>

  - trigger: ";import"
    replace: |
      import pandas as pd
      import numpy as np
      from matplotlib import pyplot as plt
      plt.ion()

  - trigger: ";linestyle;"
    replace: linkStyle default interpolate basis

  - trigger: ";h2 date;"
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "## %A %Y-%m-%d"

  - trigger: ";Date;"
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%A %Y-%m-%d"

  - trigger: ";datetime;"
    replace: "{{mydate}}"
    force_clipboard: true
    vars:
      - name: mydate
        type: date
        params:
          format: "%Y-%m-%d %H:%M:00"

  - trigger: ";ts;"
    replace: "{{mydate}}"
    force_clipboard: true
    vars:
      - name: mydate
        type: date
        params:
          format: "%Y-%m-%d %H:%M:00"

  - trigger: ";date;"
    replace: "{{mydate}}"
    force_clipboard: true
    vars:
      - name: mydate
        type: date
        params:
          format: "%Y-%m-%d"

  - trigger: ";time;"
    replace: "{{time}}"
    vars:
      - name: time
        type: date
        params:
          format: "%H:%M"

  - trigger: ";month;"
    replace: "{{date}}"
    vars:
      - name: date
        type: date
        params:
          format: "%B %Y"

  - trigger: ";mail;"
    replace: asdf0x2199@gmail.com

  - trigger: ";name;"
    replace: Max G.

  - trigger: ";link;"
    replace: "[$|$]({{clipboard}})"
    vars:
    - name: "clipboard"
      type: "clipboard"

  - trigger: ";a;"
    replace: "<a href=\"{{clipboard}}\" />$|$</a>"
    vars:
    - name: "clipboard"
      type: "clipboard"

  - trigger: ";mmd;"
    force_clipboard: true
    replace: |-
      ```mermaid
      flowchart LR
      a --> b --> c
      $|$

      %% linkStyle 0,2 stroke:none
      ```

  - trigger: ";code;"
    force_clipboard: true
    replace: |-
      ```
      $|$
      ```

  - trigger: ";make;"
    force_clipboard: true
    replace: |-
      ##@ Utility
      .PHONY: help
      help:  ## Display this help
          @awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make <target>\033[36m\033[0m\n"} /^[a-zA-Z\._-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

      ##@ dev
      install:  ## create venv
          uv venv
          uv pip install .

  - trigger: ";uname;"
    replace: "{{out}}"
    vars:
      - name: out
        type: shell
        params:
          cmd: "/Users/mgreco/.local/bin/uvx names | tr '[A-Z]' '[a-z]' | tr ' ' '-'"

  - trigger: ";pyproject;"
    force_clipboard: true
    replace: |-
      [project]
      name = "test"
      version = "0.1.0"
      description = "Add your description here"
      readme = "README.md"
      requires-python = ">=3.11"
      dependencies = []


  - trigger: ";py-multithreading;"
    force_clipboard: true
    replace: |-
      from concurrent.futures import ThreadPoolExecutor
      with ThreadPoolExecutor() as executor:
          out = executor.map(func, files)

  - trigger: ";py-multiprocessing;"
    force_clipboard: true
    replace: |-
      from concurrent.futures import ProcessPoolExecutor
      with ProcessPoolExecutor() as executor:
          out = executor.map(func, files)

  - trigger: ";py-query;"
    force_clipboard: true
    replace: |-
      # /// script
      # dependencies = [
      #     "druidq",
      #     "trinoq",
      #     "pandas",
      #     "dtale",
      #     "ipython",
      #     "pdbpp",
      # ]
      #
      # [tool.uv.sources]
      # druidq = { git = "https://github.com/asdf8601/druidq" }
      # trinoq = { git = "https://github.com/asdf8601/trinoq" }
      # ///
      from druidq import execute as druid
      from trinoq import execute as trino
      import pandas as pd
      import dtale
      import sys
      query = """
      select 1
      """
      df = trino(query, quiet=True, no_cache=True)
      # df = druid(query, quiet=True, no_cache=True).T
      if len(sys.argv) <= 1:
          print(df.to_csv())
      elif sys.argv[1] == "dtale":
          dtale.show(df, subprocess=False)
      else:
          import IPython
          IPython.embed()

  - trigger: ";trinoq;"
    force_clipboard: true
    replace: |-
      # /// script
      # dependencies = [
      #     "trinoq",
      # ]
      #
      # [tool.uv.sources]
      # trinoq = { git = "https://github.com/asdf8601/trinoq" }
      # ///
      from trinoq import execute as trino
      query = """
      select 1
      """
      df = trino(query, quiet=True, no_cache=True)
      print(df)


  - trigger: ";druidq;"
    force_clipboard: true
    replace: |-
      # /// script
      # dependencies = [
      #     "druidq",
      #     "dtale",
      # ]
      #
      # [tool.uv.sources]
      # druidq = { git = "https://github.com/asdf8601/druidq" }
      # ///
      from druidq import execute as druid
      import pandas as pd
      import dtale
      import sys
      query = """
      select 1
      """
      df = druid(query, quiet=True, no_cache=True)
      if len(sys.argv) <= 1:
          print(df.to_csv())
      elif sys.argv[1] == "dtale":
          dtale.show(df, subprocess=False)

  - trigger: ";ipy;"
    force_clipboard: true
    replace: |-
      # /// script
      # dependencies = [
      #     "druidq",
      #     "trinoq",
      #     "pandas",
      #     "dtale",
      #     "ipython",
      #     "pdbpp",
      # ]
      #
      # [tool.uv.sources]
      # druidq = { git = "https://github.com/asdf8601/druidq" }
      # trinoq = { git = "https://github.com/asdf8601/trinoq" }
      # ///
      from trinoq import execute as trino
      import IPython
      query = """
      select 1
      """
      df = trino(query, quiet=True, no_cache=True)
      IPython.embed()

