[user]
	name = Max G
	email = 6231413+asdf8601@users.noreply.github.com
	signingkey = 853653F0A567856301362455DEAD1D445DF732E1

[includeIf "gitdir:~/github.com/"]
	path = ~/github.com/.gitconfig

[includeIf "gitdir:~/gitlab.com/"]
	path = ~/gitlab.com/.gitconfig

[core]
	editor = nvim
	excludesFile = /Users/mgreco/.gitignore_global

[color]
	branch = auto
	diff = auto
	status = auto

[color "branch"]
	current = red reverse
	local = blue
	remote = green

[color "diff"]
	meta = yellow
	frag = magenta
	old = red bold
	new = green
	plain = white

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[push]
	default = current

[pull]
	default = current
	autoStash = true

[branch]
	autosetuprebase = always

[apply]
	whitespace = nowarn

[alias]
	split = "!f() { git-split $@ }; f"
	pushf = "!f() { git push --force-with-lease $@; }; f"
	rbc = "!f() { git rebase --continue; }; f"
	main = "!f() { if git diff-index --quiet HEAD --; then git checkout main && git pull; else git stash && git checkout main && git pull; fi }; f"
	sync = "!f() { if git diff-index --quiet HEAD --; then git checkout main && git pull && git checkout - && git rebase main; else git stash && git checkout main && git pull && git checkout - && git rebase main && git stash pop; fi }; f"
	newb = "!f() { if git diff-index --quiet HEAD --; then git checkout main && git pull && git checkout -b $1; else git stash && git checkout main && git pull && git checkout -b $1 && git stash pop; fi }; f"
	mcob = "!f() { if git diff-index --quiet HEAD --; then git checkout main && git pull && git checkout -b $1; else git stash && git checkout main && git pull && git checkout -b $1 && git stash pop; fi }; f"
	ai = "!git commit -m \"$(sgpt cm --model gpt-4o-mini-2024-07-18 \"$(git diff --cached)\" | tee /tmp/git_commit_$(date +'%Y%m%d_%H%M').txt)\" $@"
	aip = "!f() { git ai && git push; }; f"

	fixup = "!git log -n 50 --pretty=format:'%h %s' --no-merges | fzf | cut -c -7 | xargs -o git commit --fixup"


	ours = "!f() { git co --ours $@ && git add $@; }; f"
	theirs = "!f() { git co --theirs $@ && git add $@; }; f"

	empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"
	la = "!git config -l | grep alias | cut -c 7-"
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo \"$TOPLEVEL/{}\" && cd $A; }; f"
	done = "!f() { git here | xargs -I{} git branch -m {} done-{}; }; f"
	undone = "!f() { git here | sed 's/^done-//' | xargs -I{} git branch -m $(git here) {}; }; f"
	mv = "!f() { git here | xargs -I{} git branch -m {} $1; }; f"
	wl = worktree list
	undo = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"
	conflicts = "diff --name-only --diff-filter=U"

	st = status -s
	cl = clone
	co = "!f() { if [ $# -eq 0 ]; then git branch -a | grep -v HEAD | fzf --height 5 | sed 's/.* //' | sed 's#remotes/[^/]*/##' | xargs -r git checkout ; else git checkout $@; fi }; f"
	br = branch
	cp = cherry-pick
	gr = grep -Ii
	Pull = pull --rebase --autostash

	here = rev-parse --abbrev-ref HEAD

	track = "!f() { git branch --set-upstream-to=origin/$(git here) $(git here); }; f"

	delta  = "!f() { git diff $@ | DELTA_FEATURES='side-by-side line-numbers navigate' delta ; }; f"
	difff  = "!f() { git diff -u $@ | diff-so-fancy ; }; f"

	diff = diff --word-diff
	d = diff --word-diff
	dc = diff --cached

	dlc = diff --cached HEAD^
	dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
	diffr  = "!f() { git diff "$1"^.."$1"; }; f"

	branch = branch -ra
	bra = branch -ra

	f = "!git ls-files | grep -i"

	fix = commit --fixup
	fix = commit --fixup HEAD
	fix- = commit --fixup HEAD^

	camp = "!f() { git commit -am \"$1\" && git push; }; f"
	cm = commit -m
	cam = commit -a -m
	ca = commit --amend
	amend = commit --amend
	caa = commit -a --amend -C HEAD

	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg = !"git lg1"
	ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ci]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lc  = "!f() { git ll "$1"^.."$1"; }; f"
	lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
	fl = log -u
	filelog = log -u

	r- = reset HEAD^
	r-- = reset HEAD^^
	R = reset HEAD --hard
	R- = reset HEAD^ --hard
	R-- = reset HEAD^^ --hard

	sl = stash list
	sa = stash apply
	ss = stash save

	lasttag = describe --tags --abbrev=0
	lt = describe --tags --abbrev=0
	aliases=config --get-regexp '^alias\\.'

	br-sync = "!git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d"
	br-clean = "!git branch --merged | grep -v '\\*' | xargs -r git branch -d"


[rerere]
	enabled = true

[rebase]
	autosquash = true

[github]
	user = asdf8601

[merge]
	tool = nvimdiff4

[mergetool "nvimdiff4"]
	cmd = nvim -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[mergetool "nfugitive"]
	cmd = nvim -f -c "Gdiff" "$MERGED"

[diff]
	mnemonicprefix = true
	tool = nvimdiff2

[difftool "nvimdiff2"]
	cmd = nvim -d $LOCAL $REMOTE

[pager]
	branch = false

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
